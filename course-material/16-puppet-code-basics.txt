The most basic component of Puppet Code is a resource. A resource describes something about the state of the system, such as a certain user or file should exist, or a package should be installed, etc.


Syntax


resource_type {'resource_name':


    attribute => value,
            ...
}


* resource_name
    * If it's a file, specify the path
        * file {'./foo/bar.txt': ... }
    * If it's a package you specify the package name
* attribute
    * If it needs to be installed
    * It has to be present or not
    * Permissions


ex:


package { 'nginx':
    ensure => 'installed',

}


What ever resources you mention get installed on the agent.


Manifest


Resource + Resource + Resource = Manifest


Manifests are basically a collection of resource declarations, using the extension .pp


    package {'nginx':
    ensure => 'installed',

}
    file {'/tmp/hello.txt':

    ensure => present,

    content => 'hello world',

    mode => '0644',

}


< Stopped here, need AWS >


Master
* cd /etc/puppet 
* cd code
* ls 
    * if no environment
        * sudo mkdir -p environments/production/manifests
* cd ... manifests
* sudo nano site.pp
    * node default{
    * package {'nginx':
        * ensure => installed,
        * }
    * file {'/tmp/status.txt':
        * content => 'Nginx Installed',
        * mode => '0644',           # permissions
        * }
    * }


Slave
* sudo puppet agent --test
* cat /temp/status.txt
    * Nginx Installed


Then you can navigate to the Slave private IP and see that Nginx has been installed.


Components of Manifests


Variables
* Variables can be defined at any point in a manifest. The most common types of variables are strings and arrays of strings, but other types are also supported, such as booleans and hashes.


ex: 


$textVar = 'Test Text!'


{file '...':
    content => $textVar,

}




Loops
* Loops are typically used to repeat a task using different input values. For instance, instead of  creating 10 tasks for installing 10 different packages, you can create a single task and use a loop to repeat the task with all the different packages you want to install.


ex:


$packages = ['nginx','mysql-server']


package {$packages:
    ensure => installed,

}


Conditions
* Conditionals can be used to dynamically decide whether or not a block of code should be executed, based on a variable or an output from a command, for instance.


exec { "Test":
    command => '/bin/echo apache2 is installed > /tmp/status.txt,

    onlyif => 'bin/which apache2',

}


* Runs automatically if returns true


exec { "Test":
    command => '/bin/echo apache2 is not installed > /tmp/status.txt,
    unless => 'bin/which apache2',
}


* Runs automatically if returns false



